local getSessionId = require "PuRest.State.getSessionId"
local log = require "PuRest.Logging.FileLogger"
local LogLevelMap = require "PuRest.Logging.LogLevelMap"
local Time = require "PuRest.Util.Time.Time"
local Timer = require "PuRest.Util.Time.Timer"
local try = require "PuRest.Util.ErrorHandling.try"
local Types = require "PuRest.Util.ErrorHandling.Types"
local validateParameters = require "PuRest.Util.ErrorHandling.validateParameters"

--- Save a session in the sessions store using a session ID
-- and extend it's timeout.
--
-- @param sessions Sessions store table.
-- @param sessionId MD5 hash Session identifier string; generated by getSessionId(..).
-- @param sessionData Session data table to update session with.
-- @param isUserAgent Is the session ID based on a user agent.
-- @param timeoutInMins Timeout in minutes to set as session timout.
--
local function saveSessionData (sessions, sessionId, sessionData, isUserAgent, timeoutInMins)
	validateParameters(
		{
			sessions = {sessions, Types._table_},
			sessionId = {sessionId, Types._string_},
			sessionData = {sessionData, Types._table_},
			isUserAgent = {isUserAgent, Types._boolean_},
			timeoutInMins = {timeoutInMins, Types._number_}
		},
		"setSessionData.saveSessionData")

	-- Update session and extend timeout value.
	local key = isUserAgent and "userAgentSessions" or "clientSessions"
	local sessionTimeoutInEpochSecs = Time.getTimeNowInSecs() + (timeoutInMins * 60)

	local session = sessions[key][sessionId]
	session.data = sessionData
	session.expiryEpochTime = sessionTimeoutInEpochSecs
end

--- Set the session data for a plain text session identifier from the sessions
-- store, respecting site config. The timeout for the session is prolonged by
-- the values of the site config field 'timeoutInMins'.
--
-- @param sessions Sessions store table.
-- @param sessionData Session data table to update session with.
-- @param sessionIdentifier Plain text session identifier.
-- @param siteConfig Config for the site requesting session data.
-- @param isUserAgent Is the session identifier user agent based.
-- @return True if session was saved, false otherwise.
--
local function setSessionData (sessions, sessionData, sessionIdentifier, siteConfig, isUserAgent)
	validateParameters(
		{
			sessions = {sessions, Types._table_},
			sessionData = {sessionData, Types._table_},
			sessionIdentifier = {sessionIdentifier, Types._string_},
			siteConfig = {siteConfig, Types._table_},
			isUserAgent = {isUserAgent, Types._boolean_}
		}, "resolveSessionData.setSessionData")

	local timer = Timer()

	local sessionId, plainSessionId = getSessionId(sessionIdentifier, siteConfig.name)
	local status = false

	try(function ()
		saveSessionData(sessions, sessionId, sessionData, isUserAgent, siteConfig.sessions.timeoutInMins)

		log(string.format("Saved session with id '%s'.", sessionId), LogLevelMap.INFO)
		log(string.format("Saving session with id '%s' took %s ms.", sessionId, timer.endTimeNow()), LogLevelMap.DEBUG)

		status = true
	end)
	.catch( function (ex)
		log(string.format("Failed to save session for id '%s': %s", sessionId, ex), LogLevelMap.ERROR)
		status = false
	end)

	log(string.format("Session id in plain text: '%s'.", plainSessionId), LogLevelMap.DEBUG)

	return status
end

return setSessionData
